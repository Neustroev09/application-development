# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class BookInformation(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, title: str=None, author: str=None, genre: str=None, number_pages: int=None):  # noqa: E501
        """BookInformation - a model defined in Swagger

        :param title: The title of this BookInformation.  # noqa: E501
        :type title: str
        :param author: The author of this BookInformation.  # noqa: E501
        :type author: str
        :param genre: The genre of this BookInformation.  # noqa: E501
        :type genre: str
        :param number_pages: The number_pages of this BookInformation.  # noqa: E501
        :type number_pages: int
        """
        self.swagger_types = {
            'title': str,
            'author': str,
            'genre': str,
            'number_pages': int
        }

        self.attribute_map = {
            'title': 'title',
            'author': 'author',
            'genre': 'genre',
            'number_pages': 'numberPages'
        }
        self._title = title
        self._author = author
        self._genre = genre
        self._number_pages = number_pages

    @classmethod
    def from_dict(cls, dikt) -> 'BookInformation':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The bookInformation of this BookInformation.  # noqa: E501
        :rtype: BookInformation
        """
        return util.deserialize_model(dikt, cls)

    @property
    def title(self) -> str:
        """Gets the title of this BookInformation.


        :return: The title of this BookInformation.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title: str):
        """Sets the title of this BookInformation.


        :param title: The title of this BookInformation.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def author(self) -> str:
        """Gets the author of this BookInformation.


        :return: The author of this BookInformation.
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author: str):
        """Sets the author of this BookInformation.


        :param author: The author of this BookInformation.
        :type author: str
        """
        if author is None:
            raise ValueError("Invalid value for `author`, must not be `None`")  # noqa: E501

        self._author = author

    @property
    def genre(self) -> str:
        """Gets the genre of this BookInformation.


        :return: The genre of this BookInformation.
        :rtype: str
        """
        return self._genre

    @genre.setter
    def genre(self, genre: str):
        """Sets the genre of this BookInformation.


        :param genre: The genre of this BookInformation.
        :type genre: str
        """
        if genre is None:
            raise ValueError("Invalid value for `genre`, must not be `None`")  # noqa: E501

        self._genre = genre

    @property
    def number_pages(self) -> int:
        """Gets the number_pages of this BookInformation.


        :return: The number_pages of this BookInformation.
        :rtype: int
        """
        return self._number_pages

    @number_pages.setter
    def number_pages(self, number_pages: int):
        """Sets the number_pages of this BookInformation.


        :param number_pages: The number_pages of this BookInformation.
        :type number_pages: int
        """
        if number_pages is None:
            raise ValueError("Invalid value for `number_pages`, must not be `None`")  # noqa: E501

        self._number_pages = number_pages
